.simple-chat-container
  %h1 Simple Chat Test
  
  #messages.messages
    .message Welcome! Type a message to test the chat interface.
  
  %form#chat-form
    %input#message-input{type: "text", placeholder: "Type a message...", autofocus: true}
    %button{type: "submit"} Send
  
  %hr
  
  %h3 Debug Info
  #debug
    %p Status: Ready

:css
  .simple-chat-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
  }
  
  .messages {
    height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 20px;
    background: #f5f5f5;
  }
  
  .message {
    margin: 5px 0;
    padding: 5px;
  }
  
  .user-message {
    text-align: right;
    color: blue;
  }
  
  .assistant-message {
    text-align: left;
    color: green;
  }
  
  #chat-form {
    display: flex;
    gap: 10px;
  }
  
  #message-input {
    flex: 1;
    padding: 10px;
  }
  
  button {
    padding: 10px 20px;
  }
  
  #debug {
    margin-top: 20px;
    padding: 10px;
    background: #f0f0f0;
    font-family: monospace;
    font-size: 12px;
  }

:javascript
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('chat-form');
    const input = document.getElementById('message-input');
    const messages = document.getElementById('messages');
    const debug = document.getElementById('debug');
    
    function addMessage(content, type = 'assistant') {
      const div = document.createElement('div');
      div.className = `message ${type}-message`;
      div.textContent = content;
      messages.appendChild(div);
      messages.scrollTop = messages.scrollHeight;
    }
    
    function updateDebug(text) {
      debug.innerHTML = `<p>Status: ${text}</p>`;
    }
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const message = input.value.trim();
      if (!message) return;
      
      // Add user message
      addMessage(message, 'user');
      input.value = '';
      
      // Create assistant message container
      const assistantDiv = document.createElement('div');
      assistantDiv.className = 'message assistant-message';
      messages.appendChild(assistantDiv);
      
      let buffer = '';
      
      try {
        updateDebug('Connecting...');
        
        const response = await fetch('/api/v1/simple_chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ chat: { message } })
        });
        
        updateDebug('Connected, streaming...');
        
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          
          const text = decoder.decode(value);
          const lines = text.split('\\n');
          
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const data = line.slice(6);
              
              if (data === '[DONE]') {
                updateDebug('Stream complete');
                continue;
              }
              
              try {
                const content = JSON.parse(data);
                if (typeof content === 'string') {
                  buffer += content;
                  assistantDiv.textContent = buffer;
                  messages.scrollTop = messages.scrollHeight;
                } else if (content.error) {
                  assistantDiv.textContent = `Error: ${content.error}`;
                  updateDebug(`Error: ${content.error}`);
                }
              } catch (e) {
                console.error('Parse error:', e, 'Data:', data);
                updateDebug(`Parse error: ${e.message}`);
              }
            }
          }
        }
      } catch (error) {
        console.error('Fetch error:', error);
        assistantDiv.textContent = `Error: ${error.message}`;
        updateDebug(`Fetch error: ${error.message}`);
      }
    });
  });